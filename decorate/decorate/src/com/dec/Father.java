package com.dec;

public class Father {
	public static void main(String[] args) {
		/*// 把成绩单拿过来
		SchoolReport sr = new FouthGradeSchoolReport();
		// 看成绩单
		sr.report()
		// 签名？ 休想！
*/		
		//把美化过的成绩单拿过来
		SchoolReport sr= new SugarFouthGradeSchoolReport();
		//看成绩单
		sr.report();
		//然后老爸， 一看， 很开心， 就签名了
		sr.sign("老三"); //我叫小三， 老爸当然叫老三
	}
}
/**
  通过继承确实能够解决这个问题， 老爸看成绩单很开心， 然后就给签字了， 但现实的情
况是很复杂的， 可能老爸听我汇报最高成绩后， 就直接乐开花了， 直接签名了， 后面的排名
就没必要看了， 或者老爸要先看排名情况， 那怎么办？ 继续扩展？ 你能扩展多少个类？ 这还
是一个比较简单的场景， 一旦需要装饰的条件非常多， 比如20个， 你还通过继承来解决， 你
想象的子类有多少个？ 你是不是马上就要崩溃了！

  好， 你也看到通过继承情况确实出现了问题， 类爆炸， 类的数量激增， 光写这些类不累
死你才怪， 而且还要想想以后维护怎么办， 谁愿意接收这么一大摊本质相似的代码维护工
作？ 并且在面向对象的设计中， 如果超过两层继承， 你就应该想想是不是出设计问题了， 是
不是应该重新找一条康庄大道了， 这是经验值， 不是什么绝对的， 继承层次越多以后的维护
成本越多， 问题这么多， 那怎么办？ 好办， 我们定义一批专门负责装饰的类， 然后根据实际
情况来决定是否需要进行装饰 
 */